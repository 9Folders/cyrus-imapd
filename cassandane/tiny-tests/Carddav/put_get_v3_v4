#!perl
use Cassandane::Tiny;

sub test_put_get_v3_v4
    :needs_component_httpd
{
    my ($self) = @_;

    my $CardDAV = $self->{carddav};
    my $Id = $CardDAV->NewAddressBook('foo');
    $self->assert_not_null($Id);
    $self->assert_str_equals($Id, 'foo');
    my $href = "$Id/bar.vcf";
    my $uid = "3b678b69-ca41-461e-b2c7-f96b9fe48d68";
    my $photo = "R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==";
    my $logo = "http://bubbagump.com/logo.jpg";
    my $sound = "ABCDEF";
    my $lat = "30.3912";
    my $lon = "-88.8610";
    my $tel = "+1-800-555-1212";
    my $email1 = "shrimp\@bubbagump.com";
    my $email2 = "bubba\@bubbagump.com";
    my $tzid = "America/New_York";

    my $card = <<EOF;
BEGIN:VCARD
VERSION:3.0
UID:$uid
PHOTO;ENCODING=b;TYPE=video,GIF:$photo
LOGO;VALUE=uri;TYPE=JPEG:$logo
N:Gump;Forrest;;Mr.
FN:Forrest Gump
ORG:Bubba Gump Shrimp Co.
TITLE:Shrimp Man
REV:2008-04-24T19:52:43Z
GEO:$lat;$lon
TEL;TYPE=pref,work,voice:$tel
EMAIL;TYPE=pref:$email1
EMAIL:$email2
TZ:-05:00
TZ;VALUE=TEXT:$tzid
END:VCARD
EOF

    my %Headers = (
      'Content-Type' => 'text/vcard',
      'Authorization' => $CardDAV->auth_header(),
    );

    xlog $self, "PUT vCard v3 with text UID";
    my $Response = $CardDAV->{ua}->request('PUT', $CardDAV->request_url($href), {
        content => $card,
        headers => \%Headers,
    });
    $self->assert_num_equals(201, $Response->{status});

    xlog $self, "GET as vCard v4";
    my $response = $CardDAV->Request('GET', $href, '',
                                     'Accept' => 'text/vcard; version=4.0');
    my $newcard = $response->{content};
    $newcard =~ s/\r?\n[ \t]+//gs;  # unfold long properties
    $self->assert_matches(qr/UID:urn:uuid:$uid/, $newcard);
    $self->assert_matches(qr/PHOTO;TYPE=(VIDEO|video):data:image\/gif;base64,$photo/,
                          $newcard);
    $self->assert_matches(qr/LOGO;MEDIATYPE=image\/jpeg:$logo/, $newcard);
    $self->assert_matches(qr/GEO(;VALUE=URI)?:geo:$lat,$lon/, $newcard);
    $self->assert_matches(qr/TEL;TYPE=(WORK|work),(VOICE|VOICE);PREF=1:/, $newcard);
    $self->assert_matches(qr/EMAIL;PREF=1:$email1/, $newcard);
    $self->assert_matches(qr/EMAIL:$email2/, $newcard);
    $self->assert_matches(qr/TZ;VALUE=UTC-OFFSET:-0500/, $newcard);
    $self->assert_matches(qr/TZ(;VALUE=TEXT)?:$tzid/, $newcard);

    xlog $self, "PUT same vCard as v4 with some edits";
    $newcard =~ s|END:|SOUND;MEDIATYPE=audio/mp3:data:;base64,$sound\r\nEND:|;
    $newcard =~ s/:$tel/;VALUE=URL:tel:$tel/;
    $newcard =~ s/EMAIL;PREF=1:/EMAIL;PREF=2:/;
    $newcard =~ s/:$email2/;PREF=1:$email2/;
    $newcard =~ s/TZ;VALUE=TEXT:/TZ:/;

    $Response = $CardDAV->{ua}->request('PUT', $CardDAV->request_url($href), {
        content => $newcard,
        headers => \%Headers,
    });
    $self->assert_num_equals(204, $Response->{status});

    xlog $self, "GET as vCard v3";
    $tel =~ s/\+/\\+/;  # escape the '+' for matching

    $response = $CardDAV->Request('GET', $href, '',
                                  'Accept' => 'text/vcard; version=3.0');
    $newcard = $response->{content};
    $newcard =~ s/\r?\n[ \t]+//gs;  # unfold long properties
    $self->assert_matches(qr/UID:$uid/, $newcard);
    $self->assert_matches(qr/PHOTO;TYPE=(VIDEO|video),(GIF|gif);ENCODING=[bB]:$photo/,
                          $newcard);
    $self->assert_matches(qr/LOGO;VALUE=URI;TYPE=JPEG:$logo/, $newcard);
    $self->assert_matches(qr/SOUND;ENCODING=[bB];TYPE=(MP3|mp3):$sound/, $newcard);
    $self->assert_matches(qr/GEO:$lat;$lon/, $newcard);
    $self->assert_matches(qr/TEL;TYPE=(WORK|work),(VOICE|voice),(PREF|pref):$tel/,
                          $newcard);
    $self->assert_matches(qr/EMAIL:$email1/, $newcard);
    $self->assert_matches(qr/EMAIL;TYPE=(PREF|pref):$email2/, $newcard);
    $self->assert_matches(qr/TZ(;VALUE=UTC-OFFSET)?:-0500/, $newcard);
    $self->assert_matches(qr/TZ;VALUE=TEXT:$tzid/, $newcard);
}
